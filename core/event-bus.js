/*
 * Gnokestation Shell
 * Copyright (C) 2025 Ekong Ikpe <ekongmikpe@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* ========================================
 * FILE: core/event-bus.js
 * VERSION: 1.0.0
 * BUILD DATE: 2025-09-29
 *
 * PURPOSE:
 *   Core communication layer for Unity Station. Provides a
 *   global publish/subscribe event system (EventBus) that
 *   allows all modules and apps to communicate without
 *   direct dependencies.
 *
 * ARCHITECTURE:
 *   - Singleton object exposed as window.EventBus
 *   - Map-based storage of event â†’ listeners[]
 *   - Simple API: on(), emit(), off(), getListenerCount()
 *   - No external dependencies (loads first in system)
 *
 * LIFECYCLE:
 *   1. Loaded before any other core file
 *   2. Other system modules subscribe & emit events
 *   3. Runs throughout environment lifetime
 *   4. Never replaced or reloaded
 *
 * FEATURES:
 *   - Unlimited listeners per event
 *   - Emit events with optional payload
 *   - Safe error isolation per listener
 *   - Remove listeners individually
 *   - Debug listener counts
 *
 * EXAMPLE USAGE:
 *   EventBus.on('app-launched', data => console.log('App launched', data));
 *   EventBus.emit('app-launched', { id: 'clock' });
 *
 * AUTHOR:
 *   edmundsparrow.netlify.app | whatsappme @ 09024054758 | webaplications5050@gmail.com
 * ======================================== */

window.EventBus = {
  listeners: new Map(),

  /**
   * Register a listener for an event
   * @param {string} event - Event name
   * @param {function} callback - Function to execute when event fires
   */
  on(event, callback) {
    if (!event || typeof callback !== 'function') {
      console.warn('EventBus.on: Invalid event or callback');
      return;
    }
    
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event).push(callback);
  },

  /**
   * Emit an event to all listeners
   * @param {string} event - Event name
   * @param {*} [data] - Optional payload
   */
  emit(event, data) {
    if (!event) return;
    
    if (this.listeners.has(event)) {
      const callbacks = this.listeners.get(event);
      callbacks.forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`EventBus error in ${event} listener:`, error);
        }
      });
    }
  },

  /**
   * Remove a specific listener
   * @param {string} event - Event name
   * @param {function} callback - Function reference to remove
   */
  off(event, callback) {
    if (!this.listeners.has(event)) return;
    
    const callbacks = this.listeners.get(event);
    const index = callbacks.indexOf(callback);
    if (index > -1) {
      callbacks.splice(index, 1);
    }
    
    // Clean up empty event arrays
    if (callbacks.length === 0) {
      this.listeners.delete(event);
    }
  },

  /**
   * Get number of listeners for an event
   * @param {string} event - Event name
   * @returns {number}
   */
  getListenerCount(event) {
    return this.listeners.has(event) ? this.listeners.get(event).length : 0;
  }
};

// Register documentation with Docs service - wait for it to be ready
(function registerEventBusDoc() {
  const tryRegister = () => {
    if (window.Docs && window.Docs.initialized && typeof window.Docs.register === 'function') {
      window.Docs.register('event-bus', {
        name: "EventBus",
        version: "1.0.0",
        description: "Core communication layer providing a global publish/subscribe event system for Unity Station modules and apps.",
        type: "System Service",
        features: [
          "Global singleton (window.EventBus)",
          "Unlimited listeners per event",
          "Emit events with optional data payload",
          "Remove specific listeners with .off()",
          "Error-safe listener execution",
          "Listener count inspection via .getListenerCount()"
        ],
        methods: [
          { name: "on(event, callback)", description: "Register a listener for a given event" },
          { name: "emit(event, data)", description: "Emit an event with optional payload" },
          { name: "off(event, callback)", description: "Remove a specific listener" },
          { name: "getListenerCount(event)", description: "Return number of listeners for an event" }
        ],
        autoGenerated: false
      });
      console.log('EventBus documentation registered with Docs service');
      return true;
    }
    return false;
  };

  // Try immediate registration
  if (tryRegister()) return;

  // Wait for docs-ready event
  if (window.EventBus) {
    const onDocsReady = () => {
      if (tryRegister()) {
        window.EventBus.off('docs-ready', onDocsReady);
      }
    };
    window.EventBus.on('docs-ready', onDocsReady);
  }

  // Fallback: poll for Docs initialization
  let attempts = 0;
  const pollInterval = setInterval(() => {
    if (tryRegister() || attempts++ > 50) {
      clearInterval(pollInterval);
    }
  }, 100);
})();